The core classes, functions, and methods that will be necessary are:

1. `Task`: This class will represent a task in the to-do list. It will have properties like `id`, `title`, `description`, `category`, and `status`.

2. `TaskService`: This class will handle all the CRUD operations related to tasks. It will have methods like `create_task`, `get_task`, `update_task`, `delete_task`, and `get_all_tasks`.

3. `Database`: This class will handle all the database operations. It will have methods like `connect`, `disconnect`, `execute_query`, and `fetch_results`.

4. `main`: This is the entry point of the application. It will create an instance of `TaskService` and use it to perform operations based on user input.

Now, let's write the code for each file.

`requirements.txt`
```plaintext
psycopg2-binary==2.8.6
```

`task.py`
```python
from dataclasses import dataclass

@dataclass
class Task:
    id: int
    title: str
    description: str
    category: str
    status: str
```

`database.py`
```python
import psycopg2

class Database:
    def __init__(self, db_name, user, password, host='localhost', port='5432'):
        self.db_name = db_name
        self.user = user
        self.password = password
        self.host = host
        self.port = port
        self.conn = None

    def connect(self):
        self.conn = psycopg2.connect(
            dbname=self.db_name,
            user=self.user,
            password=self.password,
            host=self.host,
            port=self.port
        )

    def disconnect(self):
        if self.conn:
            self.conn.close()

    def execute_query(self, query, params=None):
        with self.conn.cursor() as cur:
            cur.execute(query, params)
            self.conn.commit()

    def fetch_results(self, query, params=None):
        with self.conn.cursor() as cur:
            cur.execute(query, params)
            return cur.fetchall()
```

`task_service.py`
```python
from typing import List
from .task import Task
from .database import Database

class TaskService:
    def __init__(self, db: Database):
        self.db = db

    def create_task(self, task: Task):
        query = """
        INSERT INTO tasks (title, description, category, status)
        VALUES (%s, %s, %s, %s)
        RETURNING id
        """
        params = (task.title, task.description, task.category, task.status)
        return self.db.execute_query(query, params)

    def get_task(self, task_id: int) -> Task:
        query = "SELECT * FROM tasks WHERE id = %s"
        params = (task_id,)
        result = self.db.fetch_results(query, params)
        if result:
            return Task(*result[0])
        else:
            return None

    def update_task(self, task: Task):
        query = """
        UPDATE tasks
        SET title = %s, description = %s, category = %s, status = %s
        WHERE id = %s
        """
        params = (task.title, task.description, task.category, task.status, task.id)
        self.db.execute_query(query, params)

    def delete_task(self, task_id: int):
        query = "DELETE FROM tasks WHERE id = %s"
        params = (task_id,)
        self.db.execute_query(query, params)

    def get_all_tasks(self) -> List[Task]:
        query = "SELECT * FROM tasks"
        results = self.db.fetch_results(query)
        return [Task(*result) for result in results]
```

`main.py`
```python
from .database import Database
from .task_service import TaskService
from .task import Task

def main():
    db = Database('todo_db', 'user', 'password')
    db.connect()

    task_service = TaskService(db)

    # Create a task
    task = Task(None, 'Buy groceries', 'Buy milk and eggs', 'Shopping', 'Pending')
    task_id = task_service.create_task(task)
    print(f'Task created with ID: {task_id}')

    # Get a task
    task = task_service.get_task(task_id)
    print(f'Got task: {task}')

    # Update a task
    task.status = 'Done'
    task_service.update_task(task)
    print(f'Task updated: {task}')

    # Delete a task
    task_service.delete_task(task_id)
    print(f'Task deleted with ID: {task_id}')

    # Get all tasks
    tasks = task_service.get_all_tasks()
    print(f'All tasks: {tasks}')

    db.disconnect()

if __name__ == '__main__':
    main()
```

This is a simple implementation of a to-do application in Python using a PostgreSQL database for data persistence. The `TaskService` class provides methods for creating, reading, updating, and deleting tasks. The `Database` class provides methods for connecting to the database, executing queries, and fetching results. The `Task` class represents a task in the to-do list. The `main` function is the entry point of the application. It creates an instance of `TaskService` and uses it to perform operations based on user input.